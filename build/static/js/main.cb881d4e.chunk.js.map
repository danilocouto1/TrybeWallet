{"version":3,"sources":["pages/Login.js","actions/index.js","components/header.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["Login","senhaTest","bind","loginTest","state","email","password","length","this","setState","test","toLowerCase","props","data-testid","name","onChange","e","target","value","type","to","disabled","onClick","React","Component","connect","dispatch","user","Header","console","log","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","currencies","expenses","combineReducers","action","wallet","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAMMA,E,kDACJ,aAAe,IAAD,8BACZ,gBAEKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAEjB,EAAKE,MAAQ,CACXC,MAAO,GACPF,WAAW,EACXF,WAAW,GATD,E,sDAaJK,GACR,IAAIL,GAAY,EAEZK,EAASC,QADA,IAEXN,GAAY,GAEdO,KAAKC,SAAS,CACZR,gB,gCAIMI,GACR,IAAIF,GAAY,EACL,2CACJO,KAAKL,EAAMM,iBAChBR,GAAY,GAEdK,KAAKC,SAAS,CACZJ,QACAF,gB,+BAIM,IAAD,SACiCK,KAAKJ,MAArCC,EADD,EACCA,MAAOF,EADR,EACQA,UAAWF,EADnB,EACmBA,UAClBG,EAAUI,KAAKI,MAAfR,MACR,OACE,6BACE,8BACE,6BACE,2BACES,cAAY,cACZC,KAAK,QACLC,SAAW,SAACC,GAAD,OAAO,EAAKb,UAAUa,EAAEC,OAAOC,WAG9C,6BACE,2BACEL,cAAY,iBACZM,KAAK,WACLL,KAAK,WACLC,SAAW,SAACC,GAAD,OAAO,EAAKf,UAAUe,EAAEC,OAAOC,WAG9C,6BACE,kBAAC,IAAD,CAAME,GAAG,aACP,4BACED,KAAK,SACLE,WAAalB,GAAaF,GAC1BqB,QAAU,kBAAMlB,EAAMC,KAHxB,kB,GA5DMkB,IAAMC,WA+EXC,cAAQ,MAJI,SAACC,GAAD,MAAe,CACxCtB,MAAO,SAACC,GAAD,OAAWqB,EChFL,SAACrB,GAAD,MAAY,CACzBc,KAHmB,QAInBd,SD8E2BsB,CAAKtB,QAGnBoB,CAAkCzB,GEjF3C4B,E,uKACM,IACAvB,EAAUG,KAAKI,MAAfP,MAGR,OADAwB,QAAQC,IAAItB,KAAKI,OAEf,gCACE,6BACE,wBAAIC,cAAY,eAAhB,SAEIR,GAEJ,wBAAIQ,cAAY,eAAhB,mBATO,GAaP,wBAAIA,cAAY,yBAAhB,a,GAhBWU,IAAMC,WA4BZC,eAJS,SAACrB,GAAD,MAAY,CAClCC,MAAOD,EAAMuB,KAAKtB,SAGLoB,CAEbG,GC/BmBG,E,uKAEjB,OACE,kBAAC,EAAD,U,GAH8BR,IAAMC,WCa3BQ,MAXf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYnC,IAClC,kBAAC,IAAD,CAAOkC,KAAK,YAAYC,UAAYJ,OCExBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBAC,EAAgB,CACpBpC,MAAO,ICHHoC,EAAgB,CACpBC,WAAY,GACZC,SAAU,ICEGC,cAAgB,CAAEjB,KFElB,WAA0C,IAAhCvB,EAA+B,uDAAvBqC,EAAeI,EAAQ,uCACtD,OAAQA,EAAO1B,MACf,ILRmB,QKSjB,OAAO,2BAAKf,GAAZ,IAAmBC,MAAOwC,EAAOxC,QACnC,QACE,OAAOD,IEP4B0C,ODCxB,WAA0C,IAAhC1C,EAA+B,uDAAvBqC,EAAeI,EAAQ,uCACtD,OAAQA,EAAO1B,MACf,IAAK,GACH,OACF,QACE,OAAOf,MENI2C,cAAYC,EACzBC,YACEC,YAAgBC,KAChBd,OAAOe,8BAAgCf,OAAOe,iCCClDC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,MAAQA,GAChB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.cb881d4e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport user from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.senhaTest = this.senhaTest.bind(this);\n    this.loginTest = this.loginTest.bind(this);\n\n    this.state = {\n      email: '',\n      loginTest: false,\n      senhaTest: false,\n    };\n  }\n\n  senhaTest(password) {\n    let senhaTest = false;\n    const rule = 6;\n    if (password.length >= rule) {\n      senhaTest = true;\n    }\n    this.setState({\n      senhaTest,\n    });\n  }\n\n  loginTest(email) {\n    let loginTest = false;\n    const re = /[A-Z0-9]{1,}@[A-Z0-9]{2,}\\.[A-Z0-9]{2,}/i;\n    if (re.test(email.toLowerCase())) {\n      loginTest = true;\n    }\n    this.setState({\n      email,\n      loginTest,\n    });\n  }\n\n  render() {\n    const { email, loginTest, senhaTest } = this.state;\n    const { state } = this.props;\n    return (\n      <div>\n        <form>\n          <div>\n            <input\n              data-testid=\"email-input\"\n              name=\"email\"\n              onChange={ (e) => this.loginTest(e.target.value) }\n            />\n          </div>\n          <div>\n            <input\n              data-testid=\"password-input\"\n              type=\"password\"\n              name=\"password\"\n              onChange={ (e) => this.senhaTest(e.target.value) }\n            />\n          </div>\n          <div>\n            <Link to=\"/carteira\">\n              <button\n                type=\"button\"\n                disabled={ !(loginTest && senhaTest) }\n                onClick={ () => state(email) }\n              >\n                Entrar\n              </button>\n            </Link>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  state: (email) => dispatch(user(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = { state: PropTypes.func.isRequired };\n","export const LOGIN = 'LOGIN';\n\nexport default (email) => ({\n  type: LOGIN,\n  email,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  render() {\n    const { email } = this.props;\n    const cash = 0;\n    console.log(this.props);\n    return (\n      <header>\n        <div>\n          <h3 data-testid=\"email-field\">\n            Email:\n            { email }\n          </h3>\n          <h3 data-testid=\"total-field\">\n            Despesas totais:\n            { cash }\n          </h3>\n          <h3 data-testid=\"header-currency-field\">\n            BRL\n          </h3>\n        </div>\n      </header>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n});\n\nexport default connect(\n  mapStateToProps,\n)(Header);\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport Header from '../components/header';\n\nexport default class Wallet extends React.Component {\n  render() {\n    return (\n      <Header />\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN:\n    return { ...state, email: action.email };\n  default:\n    return state;\n  }\n}\n","const INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nexport default function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case '':\n    return;\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nexport default combineReducers({ user, wallet });\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default createStore(rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}